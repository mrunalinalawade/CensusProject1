import { Dimensions, SafeAreaView, StyleSheet, Text, View } from 'react-native'
import React, { useState } from 'react'
import Header from '../../../Components/Header'
import Inputfield1 from '../../../Components/Inputfields1'
import WholeButton1 from '../../../Components/WholeButton1';
import { OTPVerification } from '../../../Components/ValidationConfig/Validations';



const { height, width } = Dimensions.get('window');
const VerifyPhoneNumber = (props) => {
    const [Email, setEmail] = useState('');
    const [EmailError, setEmailError] = useState('');
 
    const [Code, setCode] = useState('');
    const [CodeError, setCodeError] = useState('')

    const [ShowError, setShowError] = useState({
      
        EmailError: false,
        CodeError:false,
      
    
      });


      const OnSignupBtnPress = () => {
        if (CheckValidation()) {
          props.navigation.navigate("Login");
        } else {
          setShowError({
            EmailError: EmailError !== '',
         
          });
        }
      };
      const ValidateEmail = (email) => {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email) ? "" : "Please enter a valid email address.";
      };
    
      const ValidateMobileNo = (text) => {
        const phoneRegex = /^([0-9]{10,14})$/;
        return phoneRegex.test(text) ? "" : "Please enter a valid phone number (7-14 digits).";
      };
      const CheckValidation = () => {
        let valid = true;
        const emailError = ValidateEmail(Email) === "" || ValidateMobileNo(Email) === "";
        setEmailError(emailError ? "" : "Please enter a valid email address or phone number.");
        if (!emailError) valid = false;
       
    
        return valid;
      };
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: '#1C1D22' }}>
    <View style={styles.mainviewStyle}>
        <Header
            navigate={() => props.navigation.goBack()}
        />
        <Text style={styles.logintext}>Verify Authenticator</Text>
        <Text style={styles.signStyle}>Enter the 6-digit code generated by the Authenticator App</Text>
        <Text style={[styles.account,{ marginTop: '10%'}]}>Phone Number or email</Text>

        
        <Inputfield1
            PhoneField
              placeholder={'Email or Phone number'}
              MaxLength={256}
              value={Email}
              onBlur={() => {

                setShowError((prevState) => ({
                  ...prevState,
                  EmailError: !!EmailError,
                }));
              }}
              onChangeText={(text) => {
                setEmail(text);
                const isEmailValid = ValidateEmail(text) === "";
                const isPhoneValid = ValidateMobileNo(text) === "";
                if (isEmailValid || isPhoneValid) {
                  setEmailError("");
                  setShowError((prevState) => ({
                    ...prevState,
                    EmailError: false,
                  }));
                } else {
                  setEmailError("Please enter a valid email address or phone number.");
                  setShowError((prevState) => ({
                    ...prevState,
                    EmailError: true,
                  }));
                }
              }}
              Errorstyle={{ marginLeft: '5%' }}
              ShowError={ShowError.EmailError}
              Error={EmailError}
              InputFieldStyle={{
                borderColor: ShowError.EmailError ? 'red' : 'rgba(255, 255, 255, 0.06)',
                borderWidth: 1,

              }}
            />


        <Text style={[styles.account,{marginTop:'5%'}]}>Enter Verification code</Text>
                <Inputfield1
                    placeholder={''}
                    GetCode
                    MaxLength={6}
                    keyboardType="number-pad"
                    value={Code}
                    onBlur={() => {
                        if (Code.trim() !== '') {
                            setShowError((prevState) => ({
                                ...prevState,
                                CodeError: true,
                            }));
                        }
                    }}
                    onChangeText={(text) => {
                        if (Code != '' || Code != undefined) {
                            setCode(text);
                            setCodeError(OTPVerification(text));
                        }
                    }}
                    ShowError={ShowError.CodeError}
                    Error={CodeError}
                />

                <WholeButton1 Label={'Submit'} Action={OnSignupBtnPress} styles={{ width: width * 0.9, marginTop: height * 0.37 }} />
        </View>
        </SafeAreaView>
  )
}

export default VerifyPhoneNumber

const styles = StyleSheet.create({
    mainviewStyle: {
        justifyContent: 'center',
        width: width * 0.9,
        alignSelf: 'center',

    },
    logintext: {
        fontSize: 32,
        fontWeight: '600',
        color: '#fff',
        marginTop: '20%',
        lineHeight: 32.97,
    },
    signStyle: {
        fontSize: 12,
        fontWeight: '400',
        color: 'rgba(255, 255, 255, 0.6)',
        lineHeight: 20,
        marginTop: 7,
    },
    account: {
        fontSize: 12,
        fontWeight: '400',
        color: 'rgba(255, 255, 255, 0.6)',
        lineHeight: 20,
       
    },
})